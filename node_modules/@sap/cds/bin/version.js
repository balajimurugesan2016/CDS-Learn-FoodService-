/* eslint-disable no-console */
module.exports = Object.assign(list_versions, {
  flags: ['--md'],
  info,
  help: `
# SYNOPSIS

    *cds version*
    *cds -v*

    Prints the version of CDS
`})

function list_versions(_, { md, noColors, log=console.log }) {
  if (md)  return markdown()
  const mark = noColors ? s => s : require('./utils/term').info
  const versions = info()
  for (let each in versions) log(`${mark(each)}: ${versions[each]}`)
}

function info() {
  return {
    ..._versions4('..', {}),
    'Node.js': process.version,
    'home': __dirname.slice(0,-4)
  }
}

function _versions4 (pkg_name, info, parent) {
  try {
    const pkg = require(pkg_name + '/package.json')
    info[pkg.name] = pkg.version
    if (!parent) for (let d in pkg.dependencies) { // recurse sap packages in dependencies...
      if (!(d in info) && d.startsWith('@sap/')) _versions4(d, info, pkg.name)
    }
  } catch (e) {
    if (e.code !== 'MODULE_NOT_FOUND') info[pkg_name] = '-- missing --'  // unknown error
    // require fails for indirect packages if node_modules layout is nested, e.g. on Windows.
    // Try one more time with nested node_modules dir.
    else if (parent) _versions4(parent + '/node_modules/' + pkg_name, info)
  }
  return info
}

function markdown(){
  const p = _()
  console.log(`
| Node.js   | @sap/cds  | -compiler | -runtime  | Your Project: |
| --------- | --------- | --------- | --------- | ------------------ |
| ${
  p9(process.version) } | ${
  v('@sap/cds') } | ${
  v('@sap/cds-compiler')} | ${
  v('@sap/cds-services')} | [${
  p.name}](${p.repository.url || p.repository}) |
`)}

const p9 = s => (s+'         ').slice(0,9)
const v = p => (_(p).version.replace(/-SNAPSHOT.*/,'(⍺)') +'         ').slice(0,9)
const _ = (p=process.cwd()) => require(p+'/package.json')
