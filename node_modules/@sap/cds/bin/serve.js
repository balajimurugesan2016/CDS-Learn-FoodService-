module.exports = Object.assign ( serve, {
    options: [ '--from', '--to', '--at', '--with' ],
    flags: [ '--projects', '--watch', '--in-memory', '--in-memory?', '--mock', '--with-mocks' ],
    shortcuts: [ undefined, '-2', '-a', '-w', '-p' ],
    help: `
# SYNOPSIS

    *cds serve* [all] [<options>]
    *cds serve* --projects <projects> [<options>] [--watch]
    *cds serve* <services> --from <model> [<options>]
    *cds serve* <models> [<options>]

    Starts http servers which load service definitions from cds models to
    automatically construct respective service providers and bind them
    to endpoints to serve incomming requests.

    The first variant starts the server in the current working directory and
    fetches for models in these locations,  given order:
    _app/*_, _srv/*_, _services.cds|csn_.

    The second variant runs _cds serve all_ for the specified projects, each
    by spawning a worker process with _cwd = each_.

    The third and fourth variants load the specified models only, with the
    third variant allowing to restrict the server to a _single service_ in
    case the model(s) contain more than one service definition.


# OPTIONS

    *-p | --projects* <projects> [--watch]

        Runs _cds serve all_ for the specified projects, each by spawning a
        worker process with _cwd = each_. Add option *--watch* to restart
        the server upon changes in code or models.
        You can use these shortcuts:

        *cds run*    =  cds serve --projects
        *cds watch*  =  cds serve --projects --watch --with-mocks --in-memory?

    *-f | --from* <model>
    *-w | --with* <impl>
    *-a | --at* <endpoint>
    *-2 | --to* <protocol>

        Use these options when serving _single services_ to name the model(s)
        to load service definitions from, the endpoint to bind the service
        to, the protocol (i.e. _fiori_, _odata_, or _rest_) to serve and optionally
        which implementation to use (i.e. a _.js_ file).

    *--mock*

        Use this option to launch a _single service_ for a model you imported
        from an external source, e.g. from an S/4 system, in a mock server.
        In addition to constructing the service provider, this will bootstrap
        a transient _in-memory_ database, filled with tables corresponding
        to the signatures of the service's exposed entities.

    *--with-mocks*

        Use this in combination with the variants serving _multiple services_
        to start in-process mock services for all required services configured
        in _package.json#cds.requires_ which don't have external bindings
        in the current process environmemt.

    *--in-memory[?]*

        Automatically adds a transient in-memory database bootstrapped on
        each (re-)start in the same way *cds deploy* would do based on defaults
        or configuration in _package.json#cds.requires.db_. Add a question
        mark to apply a more defensive variant which respects the configured
        database, if any, and only adds an in-memory db if no persistent one is
        configured.

        Requires a sqlite driver to be installed, e.g. _npm i sqlite3_.

# EXAMPLES

    *cds serve*
    *cds serve* all
    *cds serve* CatalogService *--from* app/
    *cds serve* CatalogService *--from* srv/ *--at* /cats *--to* rest
    *cds run* --in-memory?
    *cds watch*

`})


function serve (targets, options={}) { // NOSONAR

    const projects = (options.projects || options.watch) && targets

    // cds run <multiple projects>
    if (projects && projects.length > 1) {
        const cluster = require ('cluster')
        if (cluster.isMaster) return projects.map ((p,i)=>{ // fork workers
            console.log (`[cds] - forking worker for '${p}' ...`)
            return cluster.fork ({ PROJECT:p, PORT: 'PORT' in process.env ? process.env.PORT : i+4004 })
        })
        // we are a worker --> continue below...
    }

    // cds run --watch?
    if (options.watch)  return _watch (targets, options)

    // here, we're a single launch; either top level or as a worker
    const dir = process.env.PROJECT || projects && projects[0]
    if (dir)  process.chdir (require('path').resolve(process.cwd(),dir)) // ensure we chdir before all other loads
    if (options['with-mocks'])  options = _serve_mocks (options)
    if (!projects && targets.length === 0)  targets[0] = 'all'
    return _serve (projects ? ['all'] : targets, options)

}


async function _serve (models, options={}) { // NOSONAR

    const timer = '[cds] - launched in';
    console.time (timer)
    console.log()
    let done = false

    const cds = require('../lib/cds')
    const {relative} = require('path')
    const _local = (filename) => relative('', filename)

    cds.on ('connect', ({name,options:{kind,model,credentials}})=>{
        const spec = credentials && credentials.database || model || name
        if (typeof kind === 'object')  for (let first in kind) { kind = first; break }
        console.log (`[cds] - connect to datasource - ${kind}:${spec}`)
    })
    cds.on ('serve', ({name,path,options,_impl})=>{
        console.log (`[cds] - ${options.mocked ? 'mocking' : 'serving'} ${name} at ${path}${_impl ? ' - impl: ' + _local(_impl._source || '<unknown source>') : ''}`)
    })
    cds.once ('served', ({model,app})=>{
        require('../lib/utils/app/fiori-preview').fiorify (app)
        if (!done && options.done) cds.on (options.done, loaded)
        else loaded (model)
    })
    cds.on ('listening', url => {
        if (cds.service.providers.length === 0)  throw new Error (`No service models found in '${models}'`)
        console.timeEnd (timer)
        console.log (`[cds] - server listening on ${url} ...`)
        if (process.stdin.isTTY)  console.log (`[ terminate with ^C ]\n`)
    })

    await _bootstrap_db (cds, models, options)

    const server = await require('../server')(models,options)
    server.on ('listening', ()=>{
        const url = `http://localhost:${server.address().port}`
        cds.service.bindings.export (cds.service.providers, url)
        if (!done && options.done) cds.on (options.done, ()=> listening (url))
        else listening (url)
    })

    function loaded (csn) {
        done = true
        const files = csn._sources.map(_local)
        console.log (`[cds] - service definitions loaded from:\n\n  ${files.join('\n  ')}\n`)
    }

    function listening (url) {
        cds.emit ('listening', url)
        done = true
    }

}

async function _bootstrap_db (cds, models, options) {
    const {kind,credentials:_={}} = cds.env.requires.db || {}
    if (options['in-memory']
    || (kind === 'sqlite' && _.database === ':memory:')
    || (!kind && options['in-memory?'])
    || (!kind && cds.env.features.use_in_memory && (()=>{
        try{ return require('sqlite3') }catch(e){/**/}
    })())
    ) {
        if (options.mock || options['with-mocks']) {
            const mocked = require('../lib/runtime/mocks').ignore_persistence_skip
            const csn = await cds.load (models && models != 'all' || ['db','srv'])
            await cds.deploy (mocked(csn)) .to ('sqlite::memory:')
        } else {
            await cds.deploy().to('sqlite::memory:')
        }
    }
}


function _serve_mocks (options){
    const cds = require ('../lib/cds')
    cds.once ('served', ({model,app})=> require('../lib/runtime/mocks') .serve (app)
        .then ((files)=> {
            files = files.filter(m=>m)
            cds.emit ('all-served', files.length == 0 ? model : {_sources: [...model._sources, ' ------- ', ...files ]})
        })
        .catch (console.error)
    )
    return {...options, done:'all-served' }
}


function _watch (...args) {
    try { return require('@sap/cds-dk/bin/watch')(...args) }
    catch (e) { if (e.code !== 'MODULE_NOT_FOUND')  throw e }
    console.error (`

    cds run --watch has moved... please install '@sap/cds-dk' and use
    'cds watch' instead as follows:

    npm i -g @sap/cds-dk
    cds watch

    `)
}

/* eslint no-console:off */
