#!/usr/bin/env node
module.exports = require('../lib/require') .local (module, '@sap/cds/bin/cds', CLI)
if (!module.parent)  module.exports()

function CLI (cmd = process.argv[2], ...args) {

  // ensure we are the first to load @sap/cds locally
  require('../lib/cds')

  const Shortcuts = {
    i: 'init',
    c: 'compile',
    m: 'import',
    s: 'serve',
    e: 'env',
    b: 'build',
    d: 'deploy',
    v: 'version', '-v':'version', '--version':'version',
    r: 'repl', '-r':'repl', '-e':'eval',
    h: 'help', '?':'help', '-?':'help', '--help':'help',
  }

  if (cmd in Shortcuts)  cmd = Shortcuts [cmd]
  if (!args.length)  args = process.argv.slice(3)

  // exits to help and version...
  const help = require('./help') .with (Shortcuts)
  if (!cmd && process.stdin.isTTY)  return help()
  if (args.some(a => Shortcuts[a]==='help'))   return help ([cmd])

  // determine the task to run...
  let task //...
  if (/^(.\/)?cds$/i.test(cmd))  cmd = `"${cmd}"` //> 'cds ./cds' --> 'cds "./cds"' , avoid loading cli
  try { task = require('@sap/cds-dk/bin/'+ cmd) } catch(e) { _ignored(e)
    try { task = require('./'+ cmd) } catch(e) {_ignored(e)
      cmd && args.unshift(cmd)
      task = require('./' + (cmd = 'compile'));
    }
  }
  if (typeof task !== 'function') {
    throw new Error ('unknown command: ' + cmd)
  }

  // prepare arguments and options for specific command
  const {argv, options} = require('./utils/cli').parseArgs (task, args)

  // add error handlers...
  if (cmd !== 'repl')  {
    const { logMessages: log } = require ('./utils/cli')
    const handler = process.env.DEBUG || cmd.match (/run|serve/)
      ? err => { console.error(err); process.exit(1) }
      : err => { log(err);  process.exit(1) }
    process.on('uncaughtException', handler)
    process.on('unhandledRejection', handler)
    // REMOVED --> see comments in cdsv.js
    // const messages = []
    // cds.on ('compilationMessage', (m) => messages.push (m))
    // process.once('beforeExit', () => log (messages))
  }

  // finally run the command
  const result = task.call ({help}, argv, options)
  if (result && Reflect.has(result,'then')) { // handle promise results
    result.then(res => { if (parseInt(res)) process.exitCode = res })// interpret returned int as exit code
  }

  process.on ('SIGINT', ()=>{ console.log(); process.exit() })

}

function _ignored(e) {
  if (e.code !== 'MODULE_NOT_FOUND')  throw e
}
/* eslint no-console:off */
